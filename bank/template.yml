AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31


Globals:
  Function:
    Timeout: 30
    MemorySize: 1024
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: BankApi
        JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1 # More info about tiered compilation https://aws.amazon.com/blogs/compute/optimizing-aws-lambda-function-performance-for-java/
        QUEUE_ARN_LOAN_ACCRUAL_EXTRACTION: !Ref LoanAccrualExtraction
        QUEUE_ARN_LOAN_ACCRUAL: !Ref LoanAccrualQueue
        QUEUE_ARN_LOAN_DAILY_BATCH_JOB: !Ref LoanDailyBatchJob
        BATCH_MAIN_REGION: eu-west-1

Conditions:
  createGlobalTable: !Equals [ !Ref 'AWS::Region', 'eu-west-1']
  createLoadBalancerSimulation: !Equals [ !Ref 'AWS::Region', 'eu-west-1']

# API GATEWAY

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: api-gateway-backend
      StageName: dev
      Auth:
        ApiKeyRequired: true  # for all methods
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for this API

  LoadBalancerGatewayApi:
    Type: AWS::Serverless::Api
    Condition: createLoadBalancerSimulation
    Properties:
      Name: api-load-balancer
      StageName: dev
      Auth:
        ApiKeyRequired: true  # for all methods
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for this API

# LAMBDAS

  ApiFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: bank-api
      Description: Entry point from API Gateway
      CodeUri: .
      Handler: com.lucas.bank.StreamLambdaHandler::handleRequest
      Runtime: java11
      AutoPublishAlias: production
      SnapStart:
        ApplyOn: PublishedVersions
      Architectures:
        - x86_64
      Policies:
        # Read more about SAM policy templates here
        # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: bank-data
        - DynamoDBCrudPolicy:
            TableName: bank-lock
        - DynamoDBCrudPolicy:
            TableName: bank-configuration
      Events:
        ApiGateway:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId:
              Ref: ApiGatewayApi

  LoadBalancerSimulation:
    Type: AWS::Serverless::Function
    Condition: createLoadBalancerSimulation
    Properties:
      FunctionName: load-balancer
      Description: Manual load balancer simulation to distribute requests through multiple active regions
      MemorySize: 256
      InlineCode: |
            import json
            import urllib3
            import random
            import os
            import boto3
            from botocore.exceptions import ClientError
            
            http = urllib3.PoolManager()
            
            def get_secret():
              secret_name = "dev/bank/nodes"
              region_name = "eu-west-1"
              # Create a Secrets Manager client
              session = boto3.session.Session()
              client = session.client(
              service_name='secretsmanager',
              region_name=region_name
              )
              try:
                get_secret_value_response = client.get_secret_value(
                SecretId=secret_name
                )
              except ClientError as e:
                # For a list of exceptions thrown, see
                # https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
                raise e
              # Decrypts secret using the associated KMS key.
              return get_secret_value_response['SecretString']
              # Your code goes here.
            
            def lambda_handler(event, context):
              
              secret = get_secret()
              regions = json.loads(secret)
              
              target = random.randint(1 ,3)
              
              api = regions['REGION_' + str(target) + '_URL']
              key = regions['REGION_' + str(target) + '_KEY']
              
              if api is None or key is None:
                print('ENVIRONMENT VARIABLES NOT FOUND')
              
              response = http.request(event['httpMethod'], api + event['path'],
              headers={
              'x-api-key': key,
              'content-type': 'application/json'
            },
              body = event['body'])
              
              return {
            'statusCode': response.status,
            'headers': {
              'Content-Type': response.headers['Content-Type']
            },
            'body': response.data
            }
            # Finish code
      Handler: index.lambda_handler
      Policies:
        - AWSLambdaExecute
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:dev/bank/nodes-oGUizC"
      Runtime: python3.9
      CodeUri: InlineFunctionExample
      Events:
        LoadBalancerApiGateway:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId:
              Ref: LoadBalancerGatewayApi

  LoanDailySchedule:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: bank-schedule
      Description: Scheduled tasks (e.g. fire everyday at midnight to run the batch)
      CodeUri: .
      Handler: com.lucas.bank.StreamLambdaHandler::handleRequest
      Runtime: java11
      AutoPublishAlias: production
      SnapStart:
        ApplyOn: PublishedVersions
      Architectures:
        - x86_64
      Policies:
        # Read more about SAM policy templates here
        # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: bank-data
        - DynamoDBCrudPolicy:
            TableName: bank-lock
        - DynamoDBCrudPolicy:
            TableName: bank-configuration
        - SQSSendMessagePolicy:
            QueueName:
              !GetAtt LoanDailyBatchJob.QueueName
        - SQSSendMessagePolicy:
            QueueName:
              !GetAtt LoanAccrualExtraction.QueueName
        - SQSSendMessagePolicy:
            QueueName:
              !GetAtt LoanAccrualQueue.QueueName
      Events:
        DailyBatchJob:
          Type: Schedule
          Properties:
            Schedule: 'cron(1 0 * * ? *)'
            Name: DailySchedule
            Enabled: true

  BatchFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: bank-batch
      Description: Check the number of active batch-blocks and post one message for each to extract information from dynamo in a distributed way
      CodeUri: .
      Handler: com.lucas.bank.StreamLambdaHandler::handleRequest
      Runtime: java11
      AutoPublishAlias: production
      SnapStart:
        ApplyOn: PublishedVersions
      Architectures:
        - x86_64
      Policies:
        # Read more about SAM policy templates here
        # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: bank-data
        - DynamoDBCrudPolicy:
            TableName: bank-lock
        - DynamoDBCrudPolicy:
            TableName: bank-configuration
        - SQSSendMessagePolicy:
            QueueName:
              !GetAtt LoanDailyBatchJob.QueueName
        - SQSSendMessagePolicy:
            QueueName:
              !GetAtt LoanAccrualExtraction.QueueName
        - SQSSendMessagePolicy:
            QueueName:
              !GetAtt LoanAccrualQueue.QueueName
      Events:
        LoanDailyBatchJob:
          Type: SQS
          Properties:
            Queue: !GetAtt LoanDailyBatchJob.Arn

  ExtractionFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: bank-parallel-extractor
      Description: Extract data from dynamoDb given certain batch block
      CodeUri: .
      Handler: com.lucas.bank.StreamLambdaHandler::handleRequest
      Runtime: java11
      AutoPublishAlias: production
      SnapStart:
        ApplyOn: PublishedVersions
      Architectures:
        - x86_64
      Policies:
        # Read more about SAM policy templates here
        # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: bank-data
        - DynamoDBCrudPolicy:
            TableName: bank-lock
        - DynamoDBCrudPolicy:
            TableName: bank-configuration
        - SQSSendMessagePolicy:
            QueueName:
              !GetAtt LoanDailyBatchJob.QueueName
        - SQSSendMessagePolicy:
            QueueName:
              !GetAtt LoanAccrualExtraction.QueueName
        - SQSSendMessagePolicy:
            QueueName:
              !GetAtt LoanAccrualQueue.QueueName
      Events:
        LoanAccrualBatchExtractionTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt LoanAccrualExtraction.Arn

  LoanAccrualFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: bank-loan-accrual
      Description: Calculate interest accrual and apply interest
      CodeUri: .
      Handler: com.lucas.bank.StreamLambdaHandler::handleRequest
      Runtime: java11
      AutoPublishAlias: production
      SnapStart:
        ApplyOn: PublishedVersions
      Architectures:
        - x86_64
      Policies:
        # Read more about SAM policy templates here
        # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: bank-data
        - DynamoDBCrudPolicy:
            TableName: bank-lock
        - DynamoDBCrudPolicy:
            TableName: bank-configuration
        - SQSSendMessagePolicy:
            QueueName:
              !GetAtt LoanDailyBatchJob.QueueName
        - SQSSendMessagePolicy:
            QueueName:
              !GetAtt LoanAccrualExtraction.QueueName
        - SQSSendMessagePolicy:
            QueueName:
              !GetAtt LoanAccrualQueue.QueueName
      Events:
        LoanAccrualTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt LoanAccrualQueue.Arn

# QUEUES

  LoanDailyBatchJob:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: 'loan-daily-batch-job-queue'

  LoanAccrualExtraction:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: 'loan-accrual-extraction-queue'

  LoanAccrualQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: 'loan-accrual-queue'

# DYNAMODB

  BankDataDynamoDbTable:
    Type: AWS::DynamoDB::GlobalTable
    Condition: createGlobalTable
    DeletionPolicy: Retain
    Properties:
      TableName: bank-data
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: loanState
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: loan-state-gsi
          KeySchema:
            - AttributeName: loanState
              KeyType: HASH
          Projection:
            NonKeyAttributes:
              - lastAccrualDate
              - batchBlock
              - loanId
            ProjectionType: INCLUDE
      Replicas:
        - Region: eu-west-1
        - Region: eu-central-1
        - Region: eu-north-1

  BankLockDynamoDbTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: bank-lock
      AttributeDefinitions:
        - AttributeName: key
          AttributeType: S
      KeySchema:
        - AttributeName: key
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  BankConfigurationTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: bank-configuration
      AttributeDefinitions:
        - AttributeName: key
          AttributeType: S
        - AttributeName: type
          AttributeType: S
      KeySchema:
        - AttributeName: key
          KeyType: HASH
        - AttributeName: type
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST